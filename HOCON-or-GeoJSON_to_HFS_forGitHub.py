#!/usr/bin/env python
# coding: utf-8

# In[ ]:


import bdt
from copy import deepcopy
from getpass import getpass
import inspect
import json
import os
import pandas as pd
import pyspark
from pyspark.sql import *
import time

from arcgis.gis import GIS
from arcgis.geometry import Point, Geometry, Polygon
from arcgis.features import SpatialDataFrame, GeoAccessor, GeoSeriesAccessor, FeatureLayer
from shapely.geometry import mapping, shape
from shapely.wkt import loads


# In[ ]:


serviceDefinitionTemplate = """
{
    "layers":[
        {
            "layerDefinition": {
                "hasAttachments": false,
                "capabilities": "query, editing, create, delete, update",
                "useStandardizedQueries": true,
                "supportsCoordinatesQuantization": true,
                "supportsReturningQueryGeometry": true,
                "advancedQueryCapabilities": {
                    "supportsQueryAttachments": false,
                    "supportsStatistics": true,
                    "supportsReturningGeometryCentroid": true,
                    "supportsQueryWithDistance": true,
                    "supportsDistinct": true,
                    "supportsReturningQueryExtent": true,
                    "supportsReturningGeometryProperties": false,
                    "supportsHavingClause": true,
                    "supportsOrderBy": true,
                    "supportsPagination": true,
                    "supportsQueryWithResultType": false,
                    "supportsSqlExpression": true,
                    "supportsDisjointSpatialRel": true
                },
                "drawingInfo": {
                    "renderer": {
                        "type": "simple",
                        "symbol": {
                            "type": "esriSFS",
                            "style": "esriSFSSolid",
                            "color": [
                                252,
                                146,
                                31,
                                196
                            ],
                            "outline": {
                                "width": 0.75,
                                "color": [
                                    255,
                                    255,
                                    255,
                                    191
                                ]
                            }
                        }
                    }
                },
                "templates": [
                    {
                        "name": "New Feature",
                        "description": "",
                        "prototype": {
                            "attributes": {}
                        }
                    }
                ],
                "extent": null,
                "geometryType": "esriGeometryPolygon",
                "objectIdField": "objectid",
                "fields": [],
                "hasZ": false,
                "hasM": false,
                "timeInfo": null,
                "name": "cbrs_perimeter",
                "type": "Feature Layer"
            },
            "featureSet": {}
        }
    ],
    "showLegend": true,
    "visibility": true,
    "opacity": 1
}
"""


# ### Sites Source Data
# - Retrieve site features from an ArcGIS Portal Hosted Feature Layer
# - Convert feature geometry to WKT
# - Result as a pandas dataframe

# In[ ]:


site_item=gis.content.get('d71beee92b0a4e11a0d095c36303a10a')
site_layer = site_item.layers[0]
site_pdf = site_layer.query(where='1=1', out_sr=4326).sdf
site_pdf['wkt'] = site_pdf['SHAPE'].apply(lambda row: row.WKT)
site_pdf.drop('SHAPE', axis=1, inplace=True)
site_item


# In[ ]:


site_pdf.head(1)


# ### Setup ArcGIS spatially enabled dataframe

# In[ ]:


def toEsriGeo(geojsonStr):
    geojsonObj = json.loads(geojsonStr)
    shapelyGeo = shape(geojsonObj)
    return Geometry(shapelyGeo.__geo_interface__)

perimeter_pdf['SHAPE'] = perimeter_pdf['geojson'].apply(toEsriGeo)
perimeter_pdf.spatial.set_geometry('SHAPE', sr=4326)
perimeter_pdf.spatial.validate()
perimeter_sdf = perimeter_pdf.drop('geojson', axis=1)
perimeter_sdf.head(1)


# #### Visualize CBRS perimeter with map

# In[ ]:


map1 = gis.map('New York City') #set location to whatever works for the data
map1.zoom = 10
map1.basemap = 'dark-gray-vector'

# # Normally not necessary. Something is broken in ArcGIS Python API 1.8.3 Prerelease...
map1.set_js_cdn('https://js.arcgis.com/4.15/')

perimeter_sdf.spatial.plot(map_widget=map1, renderer_type='s') #set renderer based on 
map1


# ### Create Feature Service Definition for Portal publishing
# Notes:
# - ArcGIS Server is sensitive to ordering of JSON keys
# - Feature Collection generated by ArcGIS Python does not produce a valid layerDefinition
# - Tag 'wifi-site-acquisition' allows item to be visible in the Wireless Site Acquisition application

# In[ ]:


def fixField(field):
    field.pop('sqlType', None)
    field.pop('domain', None)
    field.pop('defaultValue', None)
    return dict(field)

perimeter_name = 'cbrs_{:.0f}'.format(time.time())
perimeter_layer = perimeter_sdf.spatial.to_feature_collection().layer
perimeter_definition = json.loads(serviceDefinitionTemplate)
perimeter_definition['layers'][0]['layerDefinition']['fields'] = [fixField(field) for field in perimeter_layer.layerDefinition.fields]
perimeter_definition['layers'][0]['featureSet'] = dict(perimeter_layer.featureSet)

perimeter_properties = {
    'type': 'Feature Collection',
    'title': perimeter_name,
    'snippet': 'CBRS results proof of concept',
    'description':'CBRS results proof of concept',
    'text': json.dumps(perimeter_definition),
    'tags':'Spatial Analytics, wifi-site-acquisition',
    'typeKeywords': 'Data, Feature Collection, Singlelayer'
}
print(f'CBRS perimeter output name: {perimeter_name}')


# ### Add CBRS perimeter to ArcGIS Portal as Hosted Feature Service
# Notes:
# - Adding the item is fast, basically just uploading a file. Item is valid Portal feature layer.
# - Publishing the item turns it into a Hosted Feature Service. This step takes several minutes.

# In[ ]:


perimeter_item=gis.content.add(perimeter_properties)
perimeter_service = perimeter_item.publish()
display(perimeter_service)


# In[ ]:




